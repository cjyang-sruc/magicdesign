% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/magic_addx.R
\name{magic.addx}
\alias{magic.addx}
\title{Add an extra crossing generation.}
\usage{
magic.addx(xinfo, addx, repx, selfx)
}
\arguments{
\item{xinfo}{an object of "cross.info" class.}

\item{addx}{an integer of either 1 or 2 indicating the type of additional crosses.}

\item{repx}{an integer of number of replicates from the additional crosses.}

\item{selfx}{an integer of number of selfing generations after the additional crosses.}
}
\value{
an object of "cross.info" class, \emph{i.e.} a list of
founder combinations (fcomb) and crossing plans (xplan).
}
\description{
This function takes the "cross.info" object and adds an extra crossing
generation after the final n-way crosses have been made.
}
\details{
There are two options available: \code{addx=1} splits the n-way individuals into two equal pools
and make all possible crosses between these two pools similar to the approach of
\href{https://doi.org/10.3389/fpls.2018.01825}{Stadlmeier et al 2018}; \code{addx=2} keeps the n-way individuals
in one pool and make all possible crosses within this one pool (random mating). Note
that \code{addx=1} is only available for \strong{basic design}. While \code{addx=2} is not restricted
to just basic design, it is still not recommended for other designs.
}
\examples{
\donttest{
mpop <- magic.basic(n=8)
mpop <- magic.reps(xinfo=mpop, reps=c(1,4,1))
mpop <- magic.addx(xinfo=mpop, addx=1, repx=3, selfx=3)
}

}
