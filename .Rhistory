plot1 <- plot1 + theme(legend.position="none")
plot2 <- plot2 + theme(legend.position="none")
plot3 <- plot3 + theme(legend.position="none")
# combine plot1-3 and legend.
gridExtra::grid.arrange(plot1, plot2, legend, plot3, layout_matrix=matrix(c(1,1,2,2,3,4,4,4,4,4), nrow=2, byrow=T))
} else if(display=="whole"){
# plot4: proportion of founder genome in the final MAGIC population.
dat4 <- vector()
for(i in 1:n.design){
for(j in 1:n){
dat4 <-  rbind(dat4, cbind(colSums(input[[i]][[3]][[j]])/nrow(input[[i]][[3]][[j]]), i, j))
}
}
dat4 <- data.frame(dat4, stringsAsFactors=F)
colnames(dat4) <- c("proportion", "design", "founder")
dat4$design <- as.factor(dat4$design)
dat4$founder <- as.factor(dat4$founder)
plot4 <- ggplot() +
annotate("segment", x=-Inf, xend=Inf, y=1/n, yend=1/n, color="#555555", linetype=3) +
geom_boxplot(data=dat4, aes(x=founder, y=proportion, fill=design), alpha=0.5, lwd=0.2, outlier.alpha=0.3, outlier.size=1) +
theme(panel.background=element_blank(), panel.grid=element_blank()) +
annotate("rect", xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf, fill=NA, color="#DDDDDD") +
annotate("segment", x=seq(1.5, n, 1), xend=seq(1.5, n, 1), y=-Inf, yend=Inf, color="#EEEEEE") +
ylab("prop.") +
xlab("founder") +
labs(tag="A")
# plot5: proportions of 1 to n unique founder alleles in the final population (for each chromosome).
temp <- replicate(n.design, list(replicate(n.chr+1, vector())))
for(i in 1:n.design){
for(j in 1:n.sim){
temp[[i]][[n.chr+1]] <- cbind(temp[[i]][[n.chr+1]], rowSums(sapply(1:n, FUN=function(x) input[[i]][[3]][[x]][,j]) > 0))
}
}
for(i in 1:n.design){
for(j in 1:n.chr){
temp[[i]][[j]] <- input[[i]][[4]][[j]]
}
}
dat5 <- vector()
for(i in 1:n.design){
for(j in 1:(n.chr+1)){
dat5 <- rbind(dat5, cbind(sapply(1:n, FUN=function(x) colSums(temp[[i]][[j]]==x)/nrow(temp[[i]][[j]])), i, j))
}
}
dat5 <- melt(data.frame(dat5, stringsAsFactors=F), id.vars=c("i", "j"))
colnames(dat5) <- c("design", "chr", "founder", "prop.")
levels(dat5$founder) <- gsub("V", "", levels(dat5$founder))
dat5$design <- as.factor(dat5$design)
dat5$chr <- as.factor(dat5$chr)
if(is.null(chr.names)){
dat5$chr <- factor(dat5$chr, labels=c(paste("chr", 1:n.chr, sep=" "), "all"))
} else {
dat5$chr <- factor(dat5$chr, labels=c(paste("chr", chr.names, sep=" "), "all"))
}
plot5 <- ggplot() +
geom_boxplot(data=dat5, aes(x=founder, y=prop., fill=design), alpha=0.5, lwd=0.2, outlier.alpha=0.3, outlier.size=1) +
facet_wrap(vars(chr), ncol=3, scales="free_y") +
theme(panel.background=element_blank(), panel.grid=element_blank()) +
annotate("rect", xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf, fill=NA, color="#DDDDDD") +
annotate("segment", x=seq(1.5, n, 1), xend=seq(1.5, n, 1), y=-Inf, yend=Inf, color="#EEEEEE") +
xlab("number of unique founders") +
theme(legend.position="none") +
labs(tag="B")
# plot6: densities of segment lengths in each design.
dat6 <- vector()
for(i in 1:n.design){
for(j in 1:n.chr){
seg.mean <- rowSums(input[[i]][[5]][[j]])/n.sim
seg.sd <- sqrt(rowSums((input[[i]][[5]][[j]] - seg.mean)^2)/n.sim)
dat6 <- rbind(dat6,
data.frame(seg.len=1:nrow(input[[i]][[5]][[j]]),
seg.mean=seg.mean,
seg.sd=seg.sd,
design=i,
chr=j))
}
}
dat6$design <- as.factor(dat6$design)
dat6$chr <- as.factor(dat6$chr)
if(is.null(chr.names)){
levels(dat6$chr) <- paste("chr", levels(dat6$chr), sep=" ")
} else {
levels(dat6$chr) <- paste("chr", chr.names, sep=" ")
}
plot6 <- ggplot() +
annotate("rect", xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf, fill=NA, color="#DDDDDD") +
#geom_point(data=dat6, aes(x=seg.len, y=seg.mean, color=design), alpha=0.5, shape=16) +
geom_smooth(data=dat6, aes(x=seg.len, y=seg.mean, color=design), se=F, alpha=0.5) +
facet_wrap(vars(chr), ncol=3, scales="free") +
theme(panel.background=element_blank(), panel.grid=element_blank()) +
scale_x_continuous(expand=c(0.02,0)) +
scale_y_continuous(expand=c(0.02,0)) +
xlab("non-recombinant segment length (cM)") +
ylab("mean count") +
theme(legend.position="none") +
labs(tag="C")
# combine plot4-6.
suppressMessages(gridExtra::grid.arrange(plot4, plot5, plot6, heights=c(1, ceiling((n.chr+1)/3), ceiling(n.chr/3))))
}
}
magic.summary <- function(input){
# get some information from the input
n.design <- length(input)
n.sim <- unique(sapply(1:n.design, FUN=function(x) ncol(input[[x]][[2]])))
if(length(n.sim) > 1) stop("all designs must have the same number of simulations.")
n <- unique(sapply(1:n.design, FUN=function(x) as.numeric(attr(input[[x]], "info")[1])))
if(length(n) > 1) stop("all designs must have the same number of founders.")
n.chr <- unique(sapply(1:n.design, FUN=function(x) length(input[[x]][[4]])))
if(length(n.chr) > 1) stop("all designs must have the same number of chromosomes.")
# do not proceed if the number of RILs is less than 10.
temp <- sapply(1:n.design, FUN=function(x) as.numeric(attr(input[[x]], "info")[7]) < 10)
if(any(temp)) stop("one or more designs have too few RILs (< 10), please increase the population size.")
# print the information about all the designs under comparison.
dat <- sapply(1:n.design, FUN=function(x) attr(input[[x]], "info"))
dat <- cbind(c("founder", "type", "rep", "self", "cross", "generation", "RIL", "funnel"), dat)
dat <- data.frame(dat, stringsAsFactors=F)
colnames(dat) <- c("", paste("design ", 1:n.design, sep=""))
print(noquote(dat))
# out1: proportions of all recombinant haplotypes.
out1 <- data.frame(mean=sapply(1:n.design, FUN=function(x) mean(colSums(input[[x]][[2]]))),
variance=sapply(1:n.design, FUN=function(x) var(colSums(input[[x]][[2]]))))
rownames(out1) <- paste("design", 1:n.design, sep=" ")
# out2: number of unique recombinant haplotypes.
out2 <- data.frame(mean=sapply(1:n.design, FUN=function(x) mean(colSums(!(input[[x]][[2]]==0)))),
variance=sapply(1:n.design, FUN=function(x) var(colSums(!(input[[x]][[2]]==0)))))
rownames(out2) <- paste("design", 1:n.design, sep=" ")
# out3: proportions of individual recombinant haplotypes.
out3 <- vector()
for(i in 1:n.design){
out3 <- cbind(out3, sapply(1:nrow(input[[i]][[2]]), FUN=function(x) mean(input[[i]][[2]][x,])))
}
for(i in 1:n.design){
out3 <- cbind(out3, sapply(1:nrow(input[[i]][[2]]), FUN=function(x) var(input[[i]][[2]][x,])))
}
out3 <- data.frame(out3)
colnames(out3) <- c(paste("mean.d", 1:n.design, sep=""), paste("var.d", 1:n.design, sep=""))
rownames(out3) <- rownames(input[[1]][[2]])
# out4: proportion of founder genome in the final MAGIC population.
temp <- list()
for(i in 1:n.design){
temp[[i]] <- lapply(1:n, FUN=function(x) colSums(input[[i]][[3]][[x]])/nrow(input[[i]][[3]][[x]]))
}
out4 <- vector()
for(i in 1:n.design){
out4 <- cbind(out4, sapply(1:n, FUN=function(x) mean(temp[[i]][[x]])))
}
for(i in 1:n.design){
out4 <- cbind(out4, sapply(1:n, FUN=function(x) var(temp[[i]][[x]])))
}
out4 <- data.frame(out4)
colnames(out4) <- c(paste("mean.d", 1:n.design, sep=""), paste("var.d", 1:n.design, sep=""))
rownames(out4) <- paste("founder", 1:n, sep=" ")
# out5: proportions of 1 to n unique founder alleles in the final population (for each chromosome).
temp <- replicate(n.design, list(replicate(n.chr+1, vector())))
for(i in 1:n.design){
for(j in 1:n.sim){
temp[[i]][[n.chr+1]] <- cbind(temp[[i]][[n.chr+1]], rowSums(sapply(1:n, FUN=function(x) input[[i]][[3]][[x]][,j]) > 0))
}
}
for(i in 1:n.design){
for(j in 1:n.chr){
temp[[i]][[j]] <- input[[i]][[4]][[j]]
}
}
for(i in 1:n.design){
for(j in 1:(n.chr+1)){
temp[[i]][[j]] <- sapply(1:n, FUN=function(x) colSums(temp[[i]][[j]]==x)/nrow(temp[[i]][[j]]))
}
}
out5 <- replicate(n.chr+1, vector())
for(i in 1:(n.chr+1)){
for(j in 1:n.design){
out5[[i]] <- cbind(out5[[i]], sapply(1:n, FUN=function(x) mean(temp[[j]][[i]][, x])))
}
}
for(i in 1:(n.chr+1)){
for(j in 1:n.design){
out5[[i]] <- cbind(out5[[i]], sapply(1:n, FUN=function(x) var(temp[[j]][[i]][, x])))
}
}
for(i in 1:(n.chr+1)){
out5[[i]] <- data.frame(out5[[i]])
colnames(out5[[i]]) <- c(paste("mean.d", 1:n.design, sep=""), paste("var.d", 1:n.design, sep=""))
rownames(out5[[i]]) <- paste(1:n, "unique founder", sep=" ")
}
names(out5) <- c(paste("chr", 1:n.chr, sep=" "), "all")
# out6: mean count of different non-recombinant segment lengths in each design.
out6 <- replicate(n.chr, vector())
for(i in 1:n.chr){
for(j in 1:n.design){
out6[[i]] <- cbind(out6[[i]], sapply(1:nrow(input[[j]][[5]][[i]]), FUN=function(x) mean(input[[j]][[5]][[i]][x, ])))
}
}
for(i in 1:n.chr){
for(j in 1:n.design){
out6[[i]] <- cbind(out6[[i]], sapply(1:nrow(input[[j]][[5]][[i]]), FUN=function(x) var(input[[j]][[5]][[i]][x, ])))
}
}
for(i in 1:n.chr){
out6[[i]] <- data.frame(out6[[i]])
colnames(out6[[i]]) <- c(paste("mean.d", 1:n.design, sep=""), paste("var.d", 1:n.design, sep=""))
rownames(out6[[i]]) <- paste(seq(0, nrow(out6[[i]])-1, 1),
"-",
seq(1, nrow(out6[[i]]), 1),
" cM",
sep="")
}
return(list(prop.all.rec.hap=out1,
num.unique.hap=out2,
prop.ind.rec.hap=out3,
prop.f.genome=out4,
prop.n.unique.f=out5,
non.rec.seg.len=out6))
}
t0 <- Sys.time()
d2 <- blocksdesign::blocks(treatments=16, replicates=(16-1)*4, blocks=c(list((16-1)*4), replicate(4-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d2 <- blocksdesign::blocks(treatments=16, replicates=(16-1)*20, blocks=c(list((16-1)*20), replicate(4-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=8, replicates=(8-1)*20, blocks=c(list((8-1)*20), replicate(3-1,list(2))))$Plan,
t1 <- Sys.time()
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=8, replicates=(8-1)*20, blocks=c(list((8-1)*20), replicate(3-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=8, replicates=(8-1)*44, blocks=c(list((8-1)*44), replicate(3-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=32, replicates=(32-1)*1, blocks=c(list((32-1)*1), replicate(5-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=8, replicates=(8-1)*1, blocks=c(list((8-1)*1), replicate(3-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=16, replicates=(16-1)*1, blocks=c(list((16-1)*1), replicate(4-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=8, replicates=(8-1)*1, blocks=c(list((8-1)*1), replicate(3-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=16, replicates=(16-1)*1, blocks=c(list((16-1)*1), replicate(4-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
d1 <- blocksdesign::blocks(treatments=32, replicates=(32-1)*1, blocks=c(list((32-1)*1), replicate(5-1,list(2))))$Plan
t1 <- Sys.time()
t1 - t0
library(magicdesign)
fmat <- magic.partial(n=8, m=1, balanced=T)[[1]][[3]]
fmat
fmat <- matrix(c(1,2,3,4,5,6,7,8,
1,3,6,8,2,4,5,7,
1,4,5,8,2,3,6,7,
1,5,2,6,3,7,4,8,
1,6,4,7,2,5,3,8,
1,7,3,5,2,8,4,6,
1,8,2,7,3,6,4,5), nrow=7, byrow=T)
fmat
magic.balanced(fmat=fmat)
fmat2 <- fmat
fmat2[fmat==1] <- 3
fmat2[fmat==3] <- 1
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
magic.balanced(fmat2)
fmat
fmat2
fmat2 <- fmat
fmat2[fmat==1] <- 2
fmat2[fmat==2] <- 1
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
magic.balanced(fmat2)
fmat2
fmat
temp <- t(combn(8,2))
head(temp)
fmat3 <- list()
for(i in 1:nrow(temp)){
fmat2 <- fmat
fmat2[fmat==temp[i,1]] <- temp[i,2]
fmat2[fmat==temp[i,2]] <- temp[i,1]
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
fmat3[[i]] <- fmat2
}
nrow(do.call(rbind, fmat3))
nrow(unique(do.call(rbind, fmat3)))
sapply(1:28, FUN=function(x) magic.balanced(fmat3[[x]]))
sapply(1:28, FUN=function(x) all(fmat3[[x]]==fmat))
sapply(1:28, FUN=function(x) all(fmat3[[x]]==fmat3[[1]]))
out <- vector();for(i in 1:28){out <- rbind(out, sapply(1:28, FUN=function(x) all(fmat3[[x]]==fmat3[[i]])))}
out
fmat4 <- c(list(fmat), fmat3)
for(i in 1:29){
fmat4[[i]] <- do.call(paste, c(data.frame(fmat4[[i]]), sep=";"))
}
str(fmat4)
fmat4[[1]]
fmat5 <- vector()
for(i in 1:29){
fmat5 <- rbind(fmat5, sapply(1:29, FUN=function(x) sum(fmat4[[i]]%in%fmat4[[x]])))
}
fmat5
fmat5[[1]]
fmat4[[1]]
fmat4[[2]]
choose(8,3)
head(t(combn(8,3)))
fmat3 <- list()
for(i in 1:100){
fmat2 <- fmat
temp <- sample(1:8, 8)
for(j in 1:8){
fmat2[fmat==j] <- temp[j]
}
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
fmat3[[i]] <- fmat2
}
fmat4 <- c(list(fmat), fmat3)
for(i in 1:101){
fmat4[[i]] <- do.call(paste, c(data.frame(fmat4[[i]]), sep=";"))
}
fmat5 <- vector()
for(i in 1:101){
fmat5 <- rbind(fmat5, sapply(1:101, FUN=function(x) sum(fmat4[[i]]%in%fmat4[[x]])))
}
diag(fmat5)
fmat5[,1]
diag(fmat5) <- 0
View(fmat5)
temp <- t(combn(8,3))
fmat3 <- list()
for(i in 1:nrow(temp)){
fmat2 <- fmat
fmat2[fmat==temp[i,1]] <- temp[i,2]
fmat2[fmat==temp[i,2]] <- temp[i,3]
fmat2[fmat==temp[i,3]] <- temp[i,1]
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
fmat3 <- c(fmat3, list(fmat2))
fmat2 <- fmat
fmat2[fmat==temp[i,1]] <- temp[i,3]
fmat2[fmat==temp[i,2]] <- temp[i,1]
fmat2[fmat==temp[i,3]] <- temp[i,2]
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
fmat3 <- c(fmat3, list(fmat2))
}
fmat4 <- c(list(fmat), fmat3)
for(i in 1:113){
fmat4[[i]] <- do.call(paste, c(data.frame(fmat4[[i]]), sep=";"))
}
fmat5 <- vector()
for(i in 1:113){
fmat5 <- rbind(fmat5, sapply(1:101, FUN=function(x) sum(fmat4[[i]]%in%fmat4[[x]])))
}
fmat5[1:10,1:10]
temp[1:5,]
fmat <- read.table("C:/Users/cjyan/OneDrive/Desktop/f16_design_raw.csv", header=F, as.is=T, sep=",")
fmat <- as.matrix(fmat)
attr(fmat, "dimnames") <- NULL
fmat
magic.balanced(fmat)
magic.balanced(fmat=fmat)
magic.balanced(fmat=fmat, verbose=T)
fmat <- read.table("C:/Users/cjyan/OneDrive/Desktop/f16_design.csv", header=F, as.is=T, sep=",")
fmat <- as.matrix(fmat)
attr(fmat, "dimnames") <- NULL
magic.balanced(fmat=fmat)
fmat3 <- list()
for(i in 1:15){
fmat2 <- fmat
for(j in 1:16) fmat2[fmat==j] <- j + i
fmat2[fmat2 > 16] <- fmat2[fmat2 > 16] - 16
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
fmat3 <- c(fmat3, list(fmat2))
}
fmat4 <- c(list(fmat), fmat3)
for(i in 1:113){
fmat4[[i]] <- do.call(paste, c(data.frame(fmat4[[i]]), sep=";"))
}
fmat5 <- vector()
for(i in 1:113){
fmat5 <- rbind(fmat5, sapply(1:101, FUN=function(x) sum(fmat4[[i]]%in%fmat4[[x]])))
}
fmat4 <- c(list(fmat), fmat3)
for(i in 1:16){
fmat4[[i]] <- do.call(paste, c(data.frame(fmat4[[i]]), sep=";"))
}
fmat5 <- vector()
for(i in 1:16){
fmat5 <- rbind(fmat5, sapply(1:16, FUN=function(x) sum(fmat4[[i]]%in%fmat4[[x]])))
}
fmat5
fmat3[[1]]
fmat3[[2]]
fmat3 <- fmat
for(i in 1:100){
fmat2 <- fmat
temp <- sample(1:16, 16)
for(j in 1:16) fmat2[fmat==j] <- temp[j]
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
fmat2 <- rbind(fmat3, fmat2)
if(nrow(fmat2)==nrow(unique(fmat2))) fmat3 <- fmat2
}
1515/15
nrow(unique(fmat3))
head(fmat3)
tail(fmat3)
magic.balanced(fmat3)
magic.balanced(fmat3)[[2]]
magic.balanced(fmat3, verbose=T)[[2]]
fmat3 <- fmat
for(i in 1:1000){
fmat2 <- fmat
temp <- sample(1:16, 16)
for(j in 1:16) fmat2[fmat==j] <- temp[j]
fmat2 <- magic.rearrange(fmat2)
fmat2 <- fmat2[order(fmat2[,2]),]
fmat2 <- rbind(fmat3, fmat2)
if(nrow(fmat2)==nrow(unique(fmat2))) fmat3 <- fmat2
}
str(fmat3)
15015/15
magic.balanced(fmat3)
f32 <- read.table("C:/Users/cjyan/OneDrive/Desktop/f32.csv", header=F, as.is=T, sep=",")
f32 <- as.matrix(f32)
attr(f32, "dimnames") <- NULL
str(f32)
f32
f32[lower.tri(f32, diag=T)] <- NA
f32 <- reshape2::melt(f32, na.rm=T)
head(f32)
f32 <- f32[order(f32$value),]
head(f32)
f32 <- lapply(1:31, FUN=function(x) as.matrix(f32[f32$value==x,1:2]))
str(f32[1:3])
for(i in 1:31) attr(f32, "dimnames") <- NULL
str(f32[1:3])
for(i in 1:31) attr(f32[[i]], "dimnames") <- NULL
str(f32[1:3])
f32[[1]]
saveRDS(f32, "C:/Users/cjyan/OneDrive/Desktop/f32.RDS")
fmat <- c(t(f32[[1]]))
for(i in 2:31) fmat <- rbind(fmat, c(t(f32[[i]][sample(1:16,16),])))
fmat <- magicdesign::magic.rearrange(fmat=fmat)
head(fmat)
check <- magicdesign::magic.balanced(fmat=fmat, verbose=T)
check[[1]]
head(check[[2]])
for(k in 1:1000){
fmat <- c(t(f32[[1]]))
for(i in 2:31) fmat <- rbind(fmat, c(t(f32[[i]][sample(1:16,16),])))
check <- magicdesign::magic.balanced(fmat=fmat)
if(check) break
}
check <- magicdesign::magic.balanced(fmat=fmat, verbose=T)
check[[2]][1:10,]
f32 <- readRDS("C:/Users/cjyan/OneDrive/Desktop/f32.RDS")
f32[[1]]
f32 <- sapply(1:31, FUN=function(x) c(t(f32[[x]])))
f32
f32 <- t(f32)
head(f32)
f32 <- readRDS("C:/Users/cjyan/OneDrive/Desktop/f32.RDS")
f32 <- lapply(1:31, FUN=function(x) f32[[x]][order(f32[[x]][,1]), ])
f32 <- sapply(1:31, FUN=function(x) c(t(f32[[x]])))
f32 <- t(f32)
head(f32)
write.csv(f32, "C:/Users/cjyan/OneDrive/Desktop/f32_unordered.csv", quote=F)
### bug check
library(magicdesign)
z1 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(0,0,3), balanced=T, n.sim=100)
z2 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(0,1,3), balanced=T, n.sim=100)
z3 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(1,0,3), balanced=T, n.sim=100)
z4 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(1,1,3), balanced=T, n.sim=100)
z5 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(0,1,3), balanced=F, n.sim=100)
z6 <- magic.eval(n=8, m=0, reps=c(1,4,4), self=c(0,0,0), addx=1, repx=4, selfx=3, n.sim=100)
magic.plot(input=list(z1,z2,z3,z4,z5,z6), display="interval")
magic.plot(input=list(z1,z2,z3,z4,z5,z6), display="whole")
### bug check
library(magicdesign)
z1 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(0,0,3), balanced=T, n.sim=100)
z2 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(0,1,3), balanced=T, n.sim=100)
z3 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(1,0,3), balanced=T, n.sim=100)
z4 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(1,1,3), balanced=T, n.sim=100)
z5 <- magic.eval(n=8, m=7, reps=c(1,2,3), self=c(0,1,3), balanced=F, n.sim=100)
z6 <- magic.eval(n=8, m=0, reps=c(1,4,4), self=c(0,0,0), addx=1, repx=4, selfx=3, n.sim=100)
magic.plot(input=list(z1,z2,z3,z4,z5,z6), display="interval")
magic.plot(input=list(z1,z2,z3,z4,z5,z6), display="whole")
remove.packages("magicdesign")
remove.packages("magicdesign")
setwd("C:/Users/cjyan/Box Sync/MAGIC16/v20210204/github/magicdesign")
devtools::document()
devtools::build_manual()
devtools::install()
remove.packages("magicdesign")
install.packages("isoband")
